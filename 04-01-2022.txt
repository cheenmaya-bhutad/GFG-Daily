Problem - 
Given two strings, one is a text string and other is a pattern string. The task is to print the indexes of all the occurences of pattern string in the text string. For printing, Starting Index of a string should be taken as 1.

Example 1:

Input:
S = "batmanandrobinarebat", pat = "bat"
Output: 1 18
Explanation: The string "bat" occurs twice
in S, one starts are index 1 and the other
at index 18. 
â€‹Example 2:

Input: 
S = "abesdu", pat = "edu"
Output: -1
Explanation: There's not substring "edu"
present in S.

Your Task:
You don't need to read input or print anything. Your task is to complete the function search() which takes the string S and the string pat as inputs and returns an array denoting the start indices (1-based) of substring pat in the string S. 
Note: You don't need to return -1 yourself when there are no possible answers, just return an empty list.

Expected Time Complexity: O(|S|).
Expected Auxiliary Space: O(|S|).

Constraints:
1 ≤ |S| ≤ 105
1 ≤ |pat| ≤ |S|

Solution - 
import java.util.*;
import java.io.*;

public class Problem {
    public static void main(String[] args) throws IOException {
        //BufferedReader to take input
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while(t-- > 0) {
            //Take user input
            String S = br.readLine().trim();
            String pat = br.readLine().trim();
            Solution sol = new Solution();
            ArrayList<Integer> results = sol.search(S,pat);
            if(results.size() > 0)
                for(Integer index : results) 
                    System.out.print(index + " ");
            else
                System.out.print(-1);
            System.out.println();            
        }
        br.close();
    }
}

class Solution {
    ArrayList<Integer> search(String S,String pat) {
        ArrayList<Integer> indexes = new ArrayList<Integer>();
        int temp = 0;
        while(S.substring(temp).contains(pat)) {
            temp=S.indexOf(pat,temp);
            temp = temp + 1;
            indexes.add(temp);
        }
        return indexes;
    }
}