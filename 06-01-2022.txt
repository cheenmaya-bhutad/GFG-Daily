Problem - 
Given a array of N strings, find the longest common prefix among all strings present in the array.

Example 1:

Input:
N = 4
arr[] = {geeksforgeeks, geeks, geek,
         geezer}
Output: gee
Explanation: "gee" is the longest common
prefix in all the given strings.
Example 2:

Input: 
N = 2
arr[] = {hello, world}
Output: -1
Explanation: There's no common prefix
in the given strings.

Your Task:
You don't need to read input or print anything. Your task is to complete the function longestCommonPrefix() which takes the string array arr[] and its size N as inputs and returns the longest common prefix common in all the strings in the array. If there's no prefix common in all the strings, return "-1".

Expected Time Complexity: O(N*max(|arri|)).
Expected Auxiliary Space: O(max(|arri|)) for result.

Constraints:
1 ≤ N ≤ 103
1 ≤ |arri| ≤ 103

Solution - 
import java.util.*;
import java.io.*;

public class Problem {
    public static void main(String[] args) throws IOException {
        //BufferedReader to take input
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine().trim());
        while(t-- > 0) {
            //Store the user input. The input should be unique characters or integers.
            String[] input = br.readLine().trim().split(" ");
            Solution sol = new Solution();
            String str = sol.longestCommonPrefix(input,input.length);
        }
        br.close();
    }
}

class Solution {
    String longestCommonPrefix(String[] input,int n) {
        String temp = "";
        boolean flag = true;
        for(int i=0;i<n;i++) {
            for(int j=i+1;j<n;j++) {
                if(input[i].length() > input[j].length()) {
                    temp = input[i];
                    input[i] = input[j];
                    input[j] = temp; 
                }
            }
        }
        int j = input[0].length();
        while(j > 0) {
            for(int i=1;i<n;i++) {
                if(!(input[0].substring(0,j)).equals(input[i].substring(0,j))) {
                    flag = false;
                    break;
                }
            }
            if(!flag) {
                j=j-1;
                flag = true;
            } else
                break;
        }
        if(j != 0)
            return "-1";
        return input[0].substring(0,j);     
    }
}