Problem -
Compute Before Matrix 
Medium Accuracy: 91.76% Submissions: 1745 Points: 4
For a given 2D Matrix before, the corresponding cell (x, y) of the after matrix is calculated as follows: 

res = 0;
for(i = 0; i <= x; i++){
    for( j = 0; j <= y; j++){              
        res += before(i,j);
    }
}
after(x,y) = res;
Given an N*M 2D-Matrix after, your task is to find the corresponding before matrix for the given matrix.

 

Example 1:

Input:
N = 2, M = 3
after[][] = {{1, 3, 6},
            {3, 7, 11}}
Output:
1 2 3
2 2 1
Explanation:
The before matrix for the given after matrix
matrix is {{1, 2, 3}, {2, 2, 1}}.
Example 2:

Input: 
N = 1, M = 3
after[][] = {{1, 3, 5}}
Output:
1 2 2
Explanation: 
The before matrix for the given after matrix
is {{1, 2, 2}}.
Your Task:
Complete the function computeBeforeMatrix() which takes the integers N, M, and the 2D Matrix after as the input parameters, and returns the before matrix of the given after matrix.

Expected Time Complexity: O(N*M)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ N, M, after[i][j]  ≤  109

Solution : 
import java.util.*;
import java.io.*;

public class Problem {
    //Driver code
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t-- > 0) {
            int N = sc.nextInt();
            int M = sc.nextInt();
            int[][] after = new int[N][M];
            for(int i=0;i<N;i++) {
                for(int j=0;j<M;j++) {
                    after[i][j] = sc.nextInt();
                }
            }
            int[][] before = computeBeforeMatrix(N,M,after);
            for(int[] arr : before) {
                for(int i : arr) {
                    System.out.print(i + " ");
                }
                System.out.println();
            }
        }
        sc.close();
    }

    public static int[][] computeBeforeMatrix(int N,int M,int[][] after) {
        int[][] before = new int[N][M];
        //copy the after matrix
        for(int i=0;i<N;i++) {
            for(int j=0;j<M;j++) {
                before[i][j] = after[i][j];
            }
        }
        //subtract columns wise elements
        for(int i=0;i<N;i++) {
            for(int j=M-1;j>0;j--) {
                before[i][j] = before[i][j] - before[i][j-1];
            }
        }
        //subtract row wise elements
        for(int j=0;j<M;j++) {
            for(int i=N-1;i>0;i--) {
                before[i][j] = before[i][j] - before[i-1][j];
            }
        }
        return before;
    }
}